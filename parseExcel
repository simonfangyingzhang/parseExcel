Function Get-Value4Cell { 
    Param ( 
        [Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelinebyPropertyName=$True)]
        $Cell 
    ) 
    Process {
        if ($Cell.Text){
            [Double] $Cell.Text
        }
        else {
            0    
        }        
    } 
}

Function Get-Sum4Cells {
    Param (
        [Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelinebyPropertyName=$True)]
        $Sheet, 
        [Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelinebyPropertyName=$True)]
        $Row,
        [Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelinebyPropertyName=$True)]
        $Column,
        [Parameter(Mandatory=$False,ValueFromPipeline=$False,ValueFromPipelinebyPropertyName=$False)]
        $Height =1,
        [Parameter(Mandatory=$False,ValueFromPipeline=$False,ValueFromPipelinebyPropertyName=$False)]
        $Width = 1
    ) 
    Process {
        $Sum = 0        
        $CellNow = $Sheet.Cells.Item($row,$column)        
        $Sum += $CellNow|Get-Value4Cell
        $CellHeight = $CellNow|Get-Height4Cell
        $CellWidth = $CellNow|Get-Width4Cell

        if ($Height -gt $CellHeight){
            $Sum += Get-Sum4Cells -Sheet $Sheet -Row ($Row + $CellHeight) -Column $Column -Width $Width -Height ($Height - $CellHeight)
        }
        
        if ($Width -gt $CellWidth){
            $Sum += Get-Sum4Cells -Sheet $Sheet -Row $Row -Column ($Column+$CellWidth) -Width ($Width - $CellWidth) -Height $Height
        }

        $Sum      
        
    } 
}

Function Get-QPM4Cells {
    Param (
        [Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelinebyPropertyName=$True)]
        $Sheet,
        [Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelinebyPropertyName=$True)]
        $HeadByColumn, 
        [Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelinebyPropertyName=$True)]
        $Row,
        [Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelinebyPropertyName=$True)]
        $QP,
        [Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelinebyPropertyName=$True)]
        $M
    ) 
    Process {
        $delta = 1
        $ColumnHead = $QP|select -First 1
        $CurrentCell = $Sheet.Cells.Item($row,$HeadByColumn[$ColumnHead])
        $QP|foreach{
            $ColumnHead = $_
            $delta = $delta *(Get-Sum4Cells -Sheet $Sheet -Row $row -Column $HeadByColumn[$ColumnHead] -Height ($currentCell|Get-Height4Cell))        
        }        
        $column4M = ($HeadByColumn[$M]|where {$_ -gt ($QP|foreach {$HeadByColumn[$_]}|Measure-Object -Maximum).Maximum}|Measure-Object -Minimum).Minimum
        $delta -= Get-Sum4Cells -Sheet $Sheet -Row $row -Column $Column4M -Height ($currentCell|Get-Height4Cell)     
        [math]::abs($delta)
    } 
}

Function Get-PM4Cells {
    Param (
        [Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelinebyPropertyName=$True)]
        $Sheet,
        [Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelinebyPropertyName=$True)]
        $HeadByColumn, 
        [Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelinebyPropertyName=$True)]
        $Row,
        [Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelinebyPropertyName=$True)]
        $P,
        [Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelinebyPropertyName=$True)]
        $M
    ) 
    Process {
        $delta = 0
        $ColumnHead = $P|select -First 1
        if ($HeadByColumn[$ColumnHead] -is [System.Collections.ArrayList]) {
            $ColumnHead = $HeadByColumn[$ColumnHead]|Select -First 1            
        }
        
        $CurrentCell = $Sheet.Cells.Item($row,$ColumnHead)

        $P|foreach{
            $ColumnHead = $_
            if ($HeadByColumn[$ColumnHead] -is [System.Collections.ArrayList]) {
                $HeadByColumn[$ColumnHead]|foreach {
                    Write-Host $_
                    Write-Host $HeadByColumn[$_]
                    $delta += Get-Sum4Cells -Sheet $Sheet -Row $row -Column $_ -Height ($currentCell|Get-Height4Cell)
                }          
            }
            else {
                $delta += Get-Sum4Cells -Sheet $Sheet -Row $row -Column $HeadByColumn[$ColumnHead] -Height ($currentCell|Get-Height4Cell) 
            }
        }
                
        $M|foreach{
            $ColumnHead = $_
            $delta -= Get-Sum4Cells -Sheet $Sheet -Row $row -Column $HeadByColumn[$ColumnHead] -Height ($currentCell|Get-Height4Cell)       
        }

        [math]::abs($delta)
    } 
}


Function Get-Height4Cell { 
    Param ( 
        [Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelinebyPropertyName=$True)]
        $Cell 
    ) 
    Process {
        if ($Cell.MergeCells){
            $cell.MergeArea.Rows.Count
        }
        else {
            1
        }        
    } 
}

Function Get-Width4Cell { 
    Param ( 
        [Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelinebyPropertyName=$True)]
        $Cell 
    ) 
    Process {
        if ($Cell.MergeCells){
            $cell.MergeArea.Columns.Count
        }
        else {
            1
        }        
    } 
}


$excel = new-object -comobject Excel.Application                                                                      

$file = Get-ChildItem 'C:\Users\fzhang\Documents\2017.11月份北京仓出库信息表(1)(1).xls'

$SrcWorkbook = $excel.workbooks.open($file, $null, $true) # open readonly

$SheetName = '经销商月结'

$SrcWorkSheet = $SrcWorkbook.Worksheets|where {$_.name -eq $SheetName}

$head1st = '提货日期'

$HeadByColumn = @{}

$currentrow = 1

$currentcolumn = 1

while ($currentrow -lt $SrcWorkSheet.UsedRange.Rows.Count){
    $currentcell = $SrcWorkSheet.Cells.Item($currentrow,$currentcolumn)
    if ($currentcell.Text -eq $head1st){
        $headrow = $currentrow
        break
    }    
    $currentrow += $currentcell|Get-Height4Cell     
}

while ($currentcolumn -lt $SrcWorkSheet.UsedRange.Columns.Count){
    $currentcell = $SrcWorkSheet.Cells.Item($headrow,$currentcolumn)
    if ($currentcell.Text){
        if ($currentcell.Text -in $HeadByColumn.Keys) {
            if ($HeadByColumn[$currentcell.Text] -isnot [System.Collections.ArrayList]){
                $tmp = $HeadByColumn[$currentcell.Text]
                $HeadByColumn[$currentcell.Text] = New-Object System.Collections.ArrayList
                $HeadByColumn[$currentcell.Text].Add($tmp)
            }
            $HeadByColumn[$currentcell.Text].Add($currentcolumn)
            
        }
        else {
            $HeadByColumn.Add($currentcell.Text, $currentcolumn)
        }
    }
    $currentcolumn += $currentcell|Get-Width4Cell    
}

$ColumnID = $HeadByColumn['新泰物流单号']

Describe "checking $($file.Name) Sheet $SheetName" {
    
    $currentrow = $headrow + ($SrcWorkSheet.Cells.Item($headrow,1)|Get-Height4Cell)   
    
    while ($currentrow -lt $SrcWorkSheet.UsedRange.Rows.Count){

        $currentID = $SrcWorkSheet.Cells.Item($currentrow,$ColumnID)
        $Height = $currentID|Get-Height4Cell
        $Width = $currentID|Get-Width4Cell
        $QPs = @(('按方结算', '核算方数'),('按重量结算','核算重量（公斤）'))
        $M = '金额'
        foreach ($QP in $QPs) {
            $tmprow = $currentrow
            while (($tmprow - $currentrow) -lt $Height) {
                $ColumnHead = $QP|select -First 1
                $CurrentCell = $SrcWorkSheet.Cells.Item($tmprow,$HeadByColumn[$ColumnHead])
                $delta = Get-QPM4Cells -Sheet $SrcWorkSheet -HeadByColumn $HeadByColumn -Row $tmprow -QP $QP -M $M
                $tmprow += $currentCell|Get-Height4Cell
            
                It "checking Address $($currentCell.address()) ID $($currentCell.text)" {                
                    $delta|Should belessthan 1
                }
            }        
        }
        $CurrentCell = $currentID
                    
        $P = @('金额', '提/送货费', '发票')
        $M = '金额合计'

        $delta = Get-PM4Cells -Sheet $SrcWorkSheet -HeadByColumn $HeadByColumn -Row $currentrow -P $P -M $M
        
        $currentrow += $currentCell|Get-Height4Cell

        It "checking Address $($currentCell.address()) ID $($currentCell.text)" {
            $delta|Should belessthan 1
        }        
    }
}

